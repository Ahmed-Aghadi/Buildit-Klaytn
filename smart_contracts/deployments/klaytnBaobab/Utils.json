{
  "address": "0x11DA0f57086a19977E46B548b64166411d839a30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CrossChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidChain",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintMore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc6d6b4cec5984d135304c996e8ae86680be3faef044e99a5133d1ad0bb2e313",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x11DA0f57086a19977E46B548b64166411d839a30",
    "transactionIndex": 1,
    "gasUsed": "2557795",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000800000000000000000000000000000000000000000001000000000000000000000001000000000000000000002000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000020000000000000000000000000000040000000000000000000000000000000000000",
    "blockHash": "0x4f3ca967f339f144ea193a063e2317a3883ca3320625e50a484128ef3313539b",
    "transactionHash": "0xcc6d6b4cec5984d135304c996e8ae86680be3faef044e99a5133d1ad0bb2e313",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 139591472,
        "transactionHash": "0xcc6d6b4cec5984d135304c996e8ae86680be3faef044e99a5133d1ad0bb2e313",
        "address": "0x11DA0f57086a19977E46B548b64166411d839a30",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4f3ca967f339f144ea193a063e2317a3883ca3320625e50a484128ef3313539b"
      }
    ],
    "blockNumber": 139591472,
    "cumulativeGasUsed": "2751436",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://www.example.com/utils/",
    "0xCA34FF4068f042203087D475805c4DD8347cE958"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8ac31a76b81bc0864fbf2d9adec4820",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CrossChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IKIP37-balanceOf}. Requirements: - `owner` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IKIP37-balanceOfBatch}. Requirements: - `owners` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IKIP37-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IKIP37-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IKIP37-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IKIP37-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IKIP13-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Utils.sol\":\"Utils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ado-contracts/=lib/ado-contracts/contracts/\",\":ado-contracts/contracts/=lib/ado-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":chainlink/=lib/chainlink-brownie-contracts/contracts/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":klaytn-contracts/=lib/klaytn-contracts/\",\":klaytn/=lib/klaytn-contracts/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\",\":witnet-solidity-bridge/=lib/witnet-solidity-bridge/contracts/\",\":witnet-solidity-bridge/contracts/=lib/witnet-solidity-bridge/contracts/\"]},\"sources\":{\"lib/klaytn-contracts/contracts/KIP/interfaces/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/interfaces/IKIP13.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IKIP13.sol\\\";\\n\",\"keccak256\":\"0x538533dcc430536d456ae9e781680ca578ce70bab6b2db7cc18422d2babfd030\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/KIP/token/KIP37/IKIP37.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/token/KIP37/IKIP37.sol)\\n// Based on OpenZeppelin Contracts v4.5.0 (token/ERC1155/IERC1155.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.5.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IKIP13.sol\\\";\\n\\n/**\\n * @dev Required interface of an KIP37 compliant contract, as defined in the\\n * http://kips.klaytn.com/KIPs/kip-37#kip37-interface[KIP].\\n *\\n */\\ninterface IKIP37 is IKIP13 {\\n    /**\\n     * @dev Emitted when `amount` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * http://kips.klaytn.com/KIPs/kip-37#metadata-extension[guarantees] that `value` will equal the value\\n     * returned by {IKIP37Metadata-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `owner`.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     */\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:kip37.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `owners` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``owner``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IKIP37Receiver-onKIP37Received} and return the\\n     * acceptance magic amount.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:kip37.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IKIP37Receiver-onKIP37BatchReceived} and return the\\n     * acceptance magic amount.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Get the total supply of the token type requested.\\n        @param _id      ID of the token\\n        @return         The supply of the token type requested\\n    */\\n    function totalSupply(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x28a1b538b22834bb468fac4e52053f55c8c71c44566e771ac8bdc325d11e0e65\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/KIP/token/KIP37/IKIP37Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/token/KIP37/IKIP37Receiver.sol)\\n// Based on OpenZeppelin Contracts v4.5.0 (token/ERC1155/IERC1155Receiver.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.5.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IKIP13.sol\\\";\\n\\n/**\\n * @dev\\n */\\ninterface IKIP37Receiver is IKIP13 {\\n    /**\\n     * @dev Handles the receipt of a single KIP37 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onKIP37Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param amount The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onKIP37Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onKIP37Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple KIP37 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match amounts array)\\n     * @param amounts An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onKIP37BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb6af200c120474e5edaf86cfd5ef659631cce8acd06f85a080266cc00f801248\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/KIP/token/KIP37/KIP37.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/token/KIP37/KIP37.sol)\\n// Based on OpenZeppelin Contracts v4.5.0 (token/ERC1155/ERC1155.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.5.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IKIP37.sol\\\";\\nimport \\\"./IKIP37Receiver.sol\\\";\\nimport \\\"../../../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IKIP37MetadataURI.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/KIP13.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See http://kips.klaytn.com/KIPs/kip-37\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n */\\ncontract KIP37 is Context, KIP13, IKIP37, IKIP37MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from token ID to  token's circulating supply\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IKIP13-supportsInterface}.\\n     */\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(KIP13, IKIP13) returns (bool) {\\n        return\\n            interfaceId == type(IKIP37).interfaceId ||\\n            interfaceId == type(IKIP37MetadataURI).interfaceId ||\\n            KIP13.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IKIP37Metadata-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * http://kips.klaytn.com/KIPs/kip-37#metadata-extension[defined in the KIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual override returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev See {IKIP37-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     */\\n    function balanceOf(address owner, uint256 id) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"KIP37: address zero is not a valid owner\\\");\\n        return _balances[id][owner];\\n    }\\n\\n    /**\\n     * @dev See {IKIP37-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `owners` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"KIP37: owners and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](owners.length);\\n\\n        for (uint256 i = 0; i < owners.length; ++i) {\\n            batchBalances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IKIP37-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IKIP37-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IKIP37-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"KIP37: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IKIP37-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"KIP37: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IKIP37Receiver-onKIP37Received} and return the\\n     * acceptance magic amount.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"KIP37: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"KIP37: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:kip37.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IKIP37Receiver-onKIP37BatchReceived} and return the\\n     * acceptance magic amount.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"KIP37: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"KIP37: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"KIP37: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * http://kips.klaytn.com/KIPs/kip-37#metadata-extension[defined in the KIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IKIP37Receiver-onKIP37Received} and return the\\n     * acceptance magic amount.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"KIP37: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:kip37.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IKIP37Receiver-onKIP37BatchReceived} and return the\\n     * acceptance magic amount.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"KIP37: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"KIP37: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"KIP37: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"KIP37: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:kip37.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"KIP37: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"KIP37: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"KIP37: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"KIP37: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address, /** operator */\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory /** data */\\n    ) internal virtual {\\n        // checks to update circulating supply of given token IDs\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"KIP37: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        require(\\n            _checkOnKIP37Received(operator, from, to, id, amount, data) ||\\n                _checkOnERC1155Received(operator, from, to, id, amount, data),\\n            \\\"KIP37: transfer to non IKIP37Receiver/IERC1155Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        require(\\n            _checkOnKIP37BatchReceived(operator, from, to, ids, amounts, data) ||\\n                _checkOnERC1155BatchReceived(operator, from, to, ids, amounts, data),\\n            \\\"KIP37: transfer to non IKIP37Receiver/IERC1155Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    function _checkOnKIP37Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IKIP37Receiver(to).onKIP37Received(operator, from, id, amount, data) returns (bytes4 retval) {\\n                return retval == IKIP37Receiver.onKIP37Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    return false;\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _checkOnKIP37BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IKIP37Receiver(to).onKIP37BatchReceived(operator, from, ids, amounts, data) returns (bytes4 retval) {\\n                return retval == IKIP37Receiver.onKIP37BatchReceived.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    return false;\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 retval) {\\n                return retval == IERC1155Receiver.onERC1155Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    return false;\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC1155Receiver.onERC1155BatchReceived.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    return false;\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd3f5342015b780a2022a7331c007f789d9330b5ce3af31b9ffcd9e65f773e9e\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/KIP/token/KIP37/extensions/IKIP37MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/token/KIP37/extensions/IKIP37MetadataURI.sol)\\n// Based on OpenZeppelin Contracts v4.5.0 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.5.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IKIP37.sol\\\";\\n\\n/**\\n * @dev Interface of the optional KIP37Metadata Extension interface, as defined\\n * in the http://kips.klaytn.com/KIPs/kip-37#metadata-extension[KIP].\\n *\\n */\\ninterface IKIP37MetadataURI is IKIP37 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0984a34302238e3189ee328a91164fec31ad3d23723831cd779a16de1d82ab17\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/KIP/utils/introspection/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/utils/introspection/IKIP13.sol)\\n// Based on OpenZeppelin Contracts v4.5.0 (utils/introspection/IERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.5.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the KIP13 standard as defined in the KIP.\\n *\\n * See - http://kips.klaytn.com/KIPs/kip-13-interface_query_standard\\n */\\ninterface IKIP13 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`.\\n     * See - http://kips.klaytn.com/KIPs/kip-13-interface_query_standard#how-interface-identifiers-are-defined\\n     * to learn more about how these ids are created.\\n     *\\n     * Requirements:\\n     *\\n     * - implementation of this function call must use less than 30 000 gas\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb63277576f18a3a05c2ec7736bbb7b4a0bd0d12bbd823a4751144d60273a2c46\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/KIP/utils/introspection/KIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Klaytn Contract Library v1.0.0 (KIP/utils/introspection/KIP13.sol)\\n// Based on OpenZeppelin Contracts v4.5.0 (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.5.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IKIP13.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IKIP13} interface.\\n *\\n * Contracts that want to implement KIP13 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {KIP13Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract KIP13 is IKIP13 {\\n    /**\\n     * @dev See {IKIP13-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IKIP13).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9efe61dd73941b281759ca65eaaa0338c9a4105ba8c5d5c5b4998438830c8ed9\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84690ebda74336bdda266a1c10e4edb5e2488bf2ab018cfc0cf11693b743dff6\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xca92905e1626e8567483de21bc1208284865ed7be71d54ca320a140ac25fd290\",\"license\":\"MIT\"},\"lib/klaytn-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {KIP37} from \\\"klaytn/KIP/token/KIP37/KIP37.sol\\\";\\nimport \\\"klaytn/utils/Strings.sol\\\";\\nimport \\\"klaytn/access/Ownable.sol\\\";\\nimport \\\"klaytn/metatx/ERC2771Context.sol\\\";\\n\\ncontract Utils is ERC2771Context, KIP37, Ownable {\\n    error CrossChainNotSupported();\\n    error InvalidChain();\\n    error InsufficientBalance();\\n    string public baseUri;\\n    uint256 public utilCount;\\n\\n    constructor(\\n        string memory _baseUri,\\n        address trustedForwarder\\n    ) ERC2771Context(trustedForwarder) KIP37(_baseUri) {\\n        baseUri = _baseUri;\\n    }\\n\\n    function mintMore(uint id, uint amount) public onlyOwner {\\n        _mint(_msgSender(), id, amount, \\\"\\\");\\n    }\\n\\n    function mint(uint256 amount) public onlyOwner {\\n        utilCount += 1;\\n        _mint(_msgSender(), utilCount, amount, \\\"\\\");\\n    }\\n\\n    function uri(\\n        uint256 id\\n    ) public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(baseUri, Strings.toString(id)));\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(Context, ERC2771Context)\\n        returns (address sender)\\n    {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(Context, ERC2771Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x23d73ec1cb14fb3b04e40444032742a88fed72dbab6e86cbd91985ba5f23bbb3\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620021cb380380620021cb83398101604081905262000034916200021c565b6001600160a01b038116608052816200004d8162000080565b50620000626200005c62000099565b620000b5565b81516200007790600590602085019062000143565b50505062000349565b80516200009590600390602084019062000143565b5050565b6000620000b06200010760201b620008fe1760201c565b905090565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6080516000906001600160a01b031633036200012a575060131936013560601c90565b620000b06200013f60201b620009471760201c565b3390565b82805462000151906200030d565b90600052602060002090601f016020900481019282620001755760008555620001c0565b82601f106200019057805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001c0578251825591602001919060010190620001a3565b50620001ce929150620001d2565b5090565b5b80821115620001ce5760008155600101620001d3565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200021757600080fd5b919050565b600080604083850312156200023057600080fd5b82516001600160401b03808211156200024857600080fd5b818501915085601f8301126200025d57600080fd5b815181811115620002725762000272620001e9565b604051601f8201601f19908116603f011681019083821181831017156200029d576200029d620001e9565b81604052828152602093508884848701011115620002ba57600080fd5b600091505b82821015620002de5784820184015181830185015290830190620002bf565b82821115620002f05760008484830101525b955062000302915050858201620001ff565b925050509250929050565b600181811c908216806200032257607f821691505b6020821081036200034357634e487b7160e01b600052602260045260246000fd5b50919050565b608051611e5f6200036c600039600081816101d001526109020152611e5f6000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c80638da5cb5b116100a2578063baacbe9b11610071578063baacbe9b14610251578063bd85b0391461025a578063e985e9c51461027a578063f242432a146102b6578063f2fde38b146102c957600080fd5b80638da5cb5b146102085780639abc832014610223578063a0712d681461022b578063a22cb4651461023e57600080fd5b80634e1273f4116100de5780634e1273f41461018d5780634f7c055e146101ad578063572b6c05146101c0578063715018a61461020057600080fd5b8062fdd58e1461010f57806301ffc9a7146101355780630e89341c146101585780632eb2c2d614610178575b600080fd5b61012261011d3660046115db565b6102dc565b6040519081526020015b60405180910390f35b61014861014336600461161b565b610370565b604051901515815260200161012c565b61016b61016636600461163f565b6103c2565b60405161012c91906116b4565b61018b61018636600461180d565b6103f6565b005b6101a061019b3660046118b7565b61049d565b60405161012c91906119b2565b61018b6101bb3660046119c5565b6105c3565b6101486101ce3660046119e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b61018b610632565b6004546040516001600160a01b03909116815260200161012c565b61016b610687565b61018b61023936600461163f565b610715565b61018b61024c366004611a02565b61079e565b61012260065481565b61012261026836600461163f565b60009081526001602052604090205490565b610148610288366004611a3e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61018b6102c4366004611a71565b6107b0565b61018b6102d73660046119e7565b610847565b60006001600160a01b03831661034a5760405162461bcd60e51b815260206004820152602860248201527f4b495033373a2061646472657373207a65726f206973206e6f7420612076616c60448201526734b21037bbb732b960c11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636433ca1f60e01b14806103a157506001600160e01b031982166303a24d0760e21b145b806103bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060056103cf8361094b565b6040516020016103e0929190611b2c565b6040516020818303038152906040529050919050565b6103fe610a54565b6001600160a01b0316856001600160a01b03161480610424575061042485610288610a54565b6104895760405162461bcd60e51b815260206004820152603060248201527f4b495033373a207472616e736665722063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610341565b6104968585858585610a5e565b5050505050565b606081518351146104fe5760405162461bcd60e51b815260206004820152602560248201527f4b495033373a206f776e65727320616e6420696473206c656e677468206d69736044820152640dac2e8c6d60db1b6064820152608401610341565b6000835167ffffffffffffffff81111561051a5761051a6116c7565b604051908082528060200260200182016040528015610543578160200160208202803683370190505b50905060005b84518110156105bb5761058e85828151811061056757610567611bd2565b602002602001015185838151811061058157610581611bd2565b60200260200101516102dc565b8282815181106105a0576105a0611bd2565b60209081029190910101526105b481611bfe565b9050610549565b509392505050565b6105cb610a54565b6001600160a01b03166105e66004546001600160a01b031690565b6001600160a01b03161461060c5760405162461bcd60e51b815260040161034190611c17565b61062e610617610a54565b838360405180602001604052806000815250610c52565b5050565b61063a610a54565b6001600160a01b03166106556004546001600160a01b031690565b6001600160a01b03161461067b5760405162461bcd60e51b815260040161034190611c17565b6106856000610d76565b565b6005805461069490611ad6565b80601f01602080910402602001604051908101604052809291908181526020018280546106c090611ad6565b801561070d5780601f106106e25761010080835404028352916020019161070d565b820191906000526020600020905b8154815290600101906020018083116106f057829003601f168201915b505050505081565b61071d610a54565b6001600160a01b03166107386004546001600160a01b031690565b6001600160a01b03161461075e5760405162461bcd60e51b815260040161034190611c17565b6001600660008282546107719190611c4c565b9091555061079b9050610782610a54565b6006548360405180602001604052806000815250610c52565b50565b61062e6107a9610a54565b8383610dc8565b6107b8610a54565b6001600160a01b0316856001600160a01b031614806107de57506107de85610288610a54565b61083a5760405162461bcd60e51b815260206004820152602760248201527f4b495033373a2063616c6c6572206973206e6f74206f776e6572206e6f7220616044820152661c1c1c9bdd995960ca1b6064820152608401610341565b6104968585858585610ea6565b61084f610a54565b6001600160a01b031661086a6004546001600160a01b031690565b6001600160a01b0316146108905760405162461bcd60e51b815260040161034190611c17565b6001600160a01b0381166108f55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610341565b61079b81610d76565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361093d575060131936013560601c90565b503390565b905090565b3390565b6060816000036109725750506040805180820190915260018152600360fc1b602082015290565b8160005b811561099c578061098681611bfe565b91506109959050600a83611c7a565b9150610976565b60008167ffffffffffffffff8111156109b7576109b76116c7565b6040519080825280601f01601f1916602001820160405280156109e1576020820181803683370190505b5090505b8415610a4c576109f6600183611c8e565b9150610a03600a86611ca5565b610a0e906030611c4c565b60f81b818381518110610a2357610a23611bd2565b60200101906001600160f81b031916908160001a905350610a45600a86611c7a565b94506109e5565b949350505050565b60006109426108fe565b8151835114610abe5760405162461bcd60e51b815260206004820152602660248201527f4b495033373a2069647320616e6420616d6f756e7473206c656e677468206d696044820152650e6dac2e8c6d60d31b6064820152608401610341565b6001600160a01b038416610ae45760405162461bcd60e51b815260040161034190611cb9565b6000610aee610a54565b9050610afe818787878787610fe9565b60005b8451811015610be4576000858281518110610b1e57610b1e611bd2565b602002602001015190506000858381518110610b3c57610b3c611bd2565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610b8c5760405162461bcd60e51b815260040161034190611cfc565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610bc9908490611c4c565b9250508190555050505080610bdd90611bfe565b9050610b01565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c34929190611d44565b60405180910390a4610c4a818787878787611160565b505050505050565b6001600160a01b038416610ca85760405162461bcd60e51b815260206004820152601f60248201527f4b495033373a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610341565b6000610cb2610a54565b90506000610cbf856111ff565b90506000610ccc856111ff565b9050610cdd83600089858589610fe9565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290610d0d908490611c4c565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d6d8360008989898961124a565b50505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610e395760405162461bcd60e51b815260206004820152602760248201527f4b495033373a2073657474696e6720617070726f76616c20737461747573206660448201526637b91039b2b63360c91b6064820152608401610341565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610ecc5760405162461bcd60e51b815260040161034190611cb9565b6000610ed6610a54565b90506000610ee3856111ff565b90506000610ef0856111ff565b9050610f00838989858589610fe9565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015610f415760405162461bcd60e51b815260040161034190611cfc565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610f7e908490611c4c565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610fde848a8a8a8a8a61124a565b505050505050505050565b6001600160a01b0385166110705760005b835181101561106e5782818151811061101557611015611bd2565b60200260200101516001600086848151811061103357611033611bd2565b6020026020010151815260200190815260200160002060008282546110589190611c4c565b90915550611067905081611bfe565b9050610ffa565b505b6001600160a01b038416610c4a5760005b8351811015610d6d57600084828151811061109e5761109e611bd2565b6020026020010151905060008483815181106110bc576110bc611bd2565b602002602001015190506000600160008481526020019081526020016000205490508181101561113d5760405162461bcd60e51b815260206004820152602660248201527f4b495033373a206275726e20616d6f756e74206578636565647320746f74616c604482015265537570706c7960d01b6064820152608401610341565b6000928352600160205260409092209103905561115981611bfe565b9050611081565b61116e86868686868661126c565b806111825750611182868686868686611364565b610c4a5760405162461bcd60e51b815260206004820152604260248201527f4b495033373a207472616e7366657220746f206e6f6e20494b4950333752656360448201527f65697665722f4945524331313535526563656976657220696d706c656d656e7460648201526132b960f11b608482015260a401610341565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061123957611239611bd2565b602090810291909101015292915050565b61125886868686868661142d565b8061118257506111828686868686866114f6565b60006001600160a01b0385163b1561135657604051634da4f19960e11b81526001600160a01b03861690639b49e332906112b2908a908a90899089908990600401611d69565b6020604051808303816000875af19250505080156112ed575060408051601f3d908101601f191682019092526112ea91810190611dc7565b60015b61133c573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b606091505b50805160000361133457600091505061135a565b805181602001fd5b6001600160e01b031916634da4f19960e11b14905061135a565b5060015b9695505050505050565b60006001600160a01b0385163b156113565760405163bc197c8160e01b81526001600160a01b0386169063bc197c81906113aa908a908a90899089908990600401611d69565b6020604051808303816000875af19250505080156113e5575060408051601f3d908101601f191682019092526113e291810190611dc7565b60015b611413573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b6001600160e01b03191663bc197c8160e01b14905061135a565b60006001600160a01b0385163b156113565760405163e78b332560e01b81526001600160a01b0386169063e78b332590611473908a908a90899089908990600401611de4565b6020604051808303816000875af19250505080156114ae575060408051601f3d908101601f191682019092526114ab91810190611dc7565b60015b6114dc573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b6001600160e01b03191663e78b332560e01b14905061135a565b60006001600160a01b0385163b156113565760405163f23a6e6160e01b81526001600160a01b0386169063f23a6e619061153c908a908a90899089908990600401611de4565b6020604051808303816000875af1925050508015611577575060408051601f3d908101601f1916820190925261157491810190611dc7565b60015b6115a5573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b6001600160e01b03191663f23a6e6160e01b14905061135a565b80356001600160a01b03811681146115d657600080fd5b919050565b600080604083850312156115ee57600080fd5b6115f7836115bf565b946020939093013593505050565b6001600160e01b03198116811461079b57600080fd5b60006020828403121561162d57600080fd5b813561163881611605565b9392505050565b60006020828403121561165157600080fd5b5035919050565b60005b8381101561167357818101518382015260200161165b565b83811115611682576000848401525b50505050565b600081518084526116a0816020860160208601611658565b601f01601f19169290920160200192915050565b6020815260006116386020830184611688565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611706576117066116c7565b604052919050565b600067ffffffffffffffff821115611728576117286116c7565b5060051b60200190565b600082601f83011261174357600080fd5b813560206117586117538361170e565b6116dd565b82815260059290921b8401810191818101908684111561177757600080fd5b8286015b84811015611792578035835291830191830161177b565b509695505050505050565b600082601f8301126117ae57600080fd5b813567ffffffffffffffff8111156117c8576117c86116c7565b6117db601f8201601f19166020016116dd565b8181528460208386010111156117f057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561182557600080fd5b61182e866115bf565b945061183c602087016115bf565b9350604086013567ffffffffffffffff8082111561185957600080fd5b61186589838a01611732565b9450606088013591508082111561187b57600080fd5b61188789838a01611732565b9350608088013591508082111561189d57600080fd5b506118aa8882890161179d565b9150509295509295909350565b600080604083850312156118ca57600080fd5b823567ffffffffffffffff808211156118e257600080fd5b818501915085601f8301126118f657600080fd5b813560206119066117538361170e565b82815260059290921b8401810191818101908984111561192557600080fd5b948201945b8386101561194a5761193b866115bf565b8252948201949082019061192a565b9650508601359250508082111561196057600080fd5b5061196d85828601611732565b9150509250929050565b600081518084526020808501945080840160005b838110156119a75781518752958201959082019060010161198b565b509495945050505050565b6020815260006116386020830184611977565b600080604083850312156119d857600080fd5b50508035926020909101359150565b6000602082840312156119f957600080fd5b611638826115bf565b60008060408385031215611a1557600080fd5b611a1e836115bf565b915060208301358015158114611a3357600080fd5b809150509250929050565b60008060408385031215611a5157600080fd5b611a5a836115bf565b9150611a68602084016115bf565b90509250929050565b600080600080600060a08688031215611a8957600080fd5b611a92866115bf565b9450611aa0602087016115bf565b93506040860135925060608601359150608086013567ffffffffffffffff811115611aca57600080fd5b6118aa8882890161179d565b600181811c90821680611aea57607f821691505b602082108103611b0a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151611b22818560208601611658565b9290920192915050565b600080845481600182811c915080831680611b4857607f831692505b60208084108203611b6757634e487b7160e01b86526022600452602486fd5b818015611b7b5760018114611b8c57611bb9565b60ff19861689528489019650611bb9565b60008b81526020902060005b86811015611bb15781548b820152908501908301611b98565b505084890196505b505050505050611bc98185611b10565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c1057611c10611be8565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611c5f57611c5f611be8565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611c8957611c89611c64565b500490565b600082821015611ca057611ca0611be8565b500390565b600082611cb457611cb4611c64565b500690565b60208082526023908201527f4b495033373a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526028908201527f4b495033373a20696e73756666696369656e742062616c616e636520666f72206040820152673a3930b739b332b960c11b606082015260800190565b604081526000611d576040830185611977565b8281036020840152611bc98185611977565b6001600160a01b0386811682528516602082015260a060408201819052600090611d9590830186611977565b8281036060840152611da78186611977565b90508281036080840152611dbb8185611688565b98975050505050505050565b600060208284031215611dd957600080fd5b815161163881611605565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e1e90830184611688565b97965050505050505056fea26469706673582212200584439247c2d200cd21d349379e4302cb4e80a78df3c41563aa0db401228e7a64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010a5760003560e01c80638da5cb5b116100a2578063baacbe9b11610071578063baacbe9b14610251578063bd85b0391461025a578063e985e9c51461027a578063f242432a146102b6578063f2fde38b146102c957600080fd5b80638da5cb5b146102085780639abc832014610223578063a0712d681461022b578063a22cb4651461023e57600080fd5b80634e1273f4116100de5780634e1273f41461018d5780634f7c055e146101ad578063572b6c05146101c0578063715018a61461020057600080fd5b8062fdd58e1461010f57806301ffc9a7146101355780630e89341c146101585780632eb2c2d614610178575b600080fd5b61012261011d3660046115db565b6102dc565b6040519081526020015b60405180910390f35b61014861014336600461161b565b610370565b604051901515815260200161012c565b61016b61016636600461163f565b6103c2565b60405161012c91906116b4565b61018b61018636600461180d565b6103f6565b005b6101a061019b3660046118b7565b61049d565b60405161012c91906119b2565b61018b6101bb3660046119c5565b6105c3565b6101486101ce3660046119e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b61018b610632565b6004546040516001600160a01b03909116815260200161012c565b61016b610687565b61018b61023936600461163f565b610715565b61018b61024c366004611a02565b61079e565b61012260065481565b61012261026836600461163f565b60009081526001602052604090205490565b610148610288366004611a3e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61018b6102c4366004611a71565b6107b0565b61018b6102d73660046119e7565b610847565b60006001600160a01b03831661034a5760405162461bcd60e51b815260206004820152602860248201527f4b495033373a2061646472657373207a65726f206973206e6f7420612076616c60448201526734b21037bbb732b960c11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636433ca1f60e01b14806103a157506001600160e01b031982166303a24d0760e21b145b806103bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060056103cf8361094b565b6040516020016103e0929190611b2c565b6040516020818303038152906040529050919050565b6103fe610a54565b6001600160a01b0316856001600160a01b03161480610424575061042485610288610a54565b6104895760405162461bcd60e51b815260206004820152603060248201527f4b495033373a207472616e736665722063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610341565b6104968585858585610a5e565b5050505050565b606081518351146104fe5760405162461bcd60e51b815260206004820152602560248201527f4b495033373a206f776e65727320616e6420696473206c656e677468206d69736044820152640dac2e8c6d60db1b6064820152608401610341565b6000835167ffffffffffffffff81111561051a5761051a6116c7565b604051908082528060200260200182016040528015610543578160200160208202803683370190505b50905060005b84518110156105bb5761058e85828151811061056757610567611bd2565b602002602001015185838151811061058157610581611bd2565b60200260200101516102dc565b8282815181106105a0576105a0611bd2565b60209081029190910101526105b481611bfe565b9050610549565b509392505050565b6105cb610a54565b6001600160a01b03166105e66004546001600160a01b031690565b6001600160a01b03161461060c5760405162461bcd60e51b815260040161034190611c17565b61062e610617610a54565b838360405180602001604052806000815250610c52565b5050565b61063a610a54565b6001600160a01b03166106556004546001600160a01b031690565b6001600160a01b03161461067b5760405162461bcd60e51b815260040161034190611c17565b6106856000610d76565b565b6005805461069490611ad6565b80601f01602080910402602001604051908101604052809291908181526020018280546106c090611ad6565b801561070d5780601f106106e25761010080835404028352916020019161070d565b820191906000526020600020905b8154815290600101906020018083116106f057829003601f168201915b505050505081565b61071d610a54565b6001600160a01b03166107386004546001600160a01b031690565b6001600160a01b03161461075e5760405162461bcd60e51b815260040161034190611c17565b6001600660008282546107719190611c4c565b9091555061079b9050610782610a54565b6006548360405180602001604052806000815250610c52565b50565b61062e6107a9610a54565b8383610dc8565b6107b8610a54565b6001600160a01b0316856001600160a01b031614806107de57506107de85610288610a54565b61083a5760405162461bcd60e51b815260206004820152602760248201527f4b495033373a2063616c6c6572206973206e6f74206f776e6572206e6f7220616044820152661c1c1c9bdd995960ca1b6064820152608401610341565b6104968585858585610ea6565b61084f610a54565b6001600160a01b031661086a6004546001600160a01b031690565b6001600160a01b0316146108905760405162461bcd60e51b815260040161034190611c17565b6001600160a01b0381166108f55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610341565b61079b81610d76565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361093d575060131936013560601c90565b503390565b905090565b3390565b6060816000036109725750506040805180820190915260018152600360fc1b602082015290565b8160005b811561099c578061098681611bfe565b91506109959050600a83611c7a565b9150610976565b60008167ffffffffffffffff8111156109b7576109b76116c7565b6040519080825280601f01601f1916602001820160405280156109e1576020820181803683370190505b5090505b8415610a4c576109f6600183611c8e565b9150610a03600a86611ca5565b610a0e906030611c4c565b60f81b818381518110610a2357610a23611bd2565b60200101906001600160f81b031916908160001a905350610a45600a86611c7a565b94506109e5565b949350505050565b60006109426108fe565b8151835114610abe5760405162461bcd60e51b815260206004820152602660248201527f4b495033373a2069647320616e6420616d6f756e7473206c656e677468206d696044820152650e6dac2e8c6d60d31b6064820152608401610341565b6001600160a01b038416610ae45760405162461bcd60e51b815260040161034190611cb9565b6000610aee610a54565b9050610afe818787878787610fe9565b60005b8451811015610be4576000858281518110610b1e57610b1e611bd2565b602002602001015190506000858381518110610b3c57610b3c611bd2565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610b8c5760405162461bcd60e51b815260040161034190611cfc565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610bc9908490611c4c565b9250508190555050505080610bdd90611bfe565b9050610b01565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c34929190611d44565b60405180910390a4610c4a818787878787611160565b505050505050565b6001600160a01b038416610ca85760405162461bcd60e51b815260206004820152601f60248201527f4b495033373a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610341565b6000610cb2610a54565b90506000610cbf856111ff565b90506000610ccc856111ff565b9050610cdd83600089858589610fe9565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290610d0d908490611c4c565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d6d8360008989898961124a565b50505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610e395760405162461bcd60e51b815260206004820152602760248201527f4b495033373a2073657474696e6720617070726f76616c20737461747573206660448201526637b91039b2b63360c91b6064820152608401610341565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610ecc5760405162461bcd60e51b815260040161034190611cb9565b6000610ed6610a54565b90506000610ee3856111ff565b90506000610ef0856111ff565b9050610f00838989858589610fe9565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015610f415760405162461bcd60e51b815260040161034190611cfc565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610f7e908490611c4c565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610fde848a8a8a8a8a61124a565b505050505050505050565b6001600160a01b0385166110705760005b835181101561106e5782818151811061101557611015611bd2565b60200260200101516001600086848151811061103357611033611bd2565b6020026020010151815260200190815260200160002060008282546110589190611c4c565b90915550611067905081611bfe565b9050610ffa565b505b6001600160a01b038416610c4a5760005b8351811015610d6d57600084828151811061109e5761109e611bd2565b6020026020010151905060008483815181106110bc576110bc611bd2565b602002602001015190506000600160008481526020019081526020016000205490508181101561113d5760405162461bcd60e51b815260206004820152602660248201527f4b495033373a206275726e20616d6f756e74206578636565647320746f74616c604482015265537570706c7960d01b6064820152608401610341565b6000928352600160205260409092209103905561115981611bfe565b9050611081565b61116e86868686868661126c565b806111825750611182868686868686611364565b610c4a5760405162461bcd60e51b815260206004820152604260248201527f4b495033373a207472616e7366657220746f206e6f6e20494b4950333752656360448201527f65697665722f4945524331313535526563656976657220696d706c656d656e7460648201526132b960f11b608482015260a401610341565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061123957611239611bd2565b602090810291909101015292915050565b61125886868686868661142d565b8061118257506111828686868686866114f6565b60006001600160a01b0385163b1561135657604051634da4f19960e11b81526001600160a01b03861690639b49e332906112b2908a908a90899089908990600401611d69565b6020604051808303816000875af19250505080156112ed575060408051601f3d908101601f191682019092526112ea91810190611dc7565b60015b61133c573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b606091505b50805160000361133457600091505061135a565b805181602001fd5b6001600160e01b031916634da4f19960e11b14905061135a565b5060015b9695505050505050565b60006001600160a01b0385163b156113565760405163bc197c8160e01b81526001600160a01b0386169063bc197c81906113aa908a908a90899089908990600401611d69565b6020604051808303816000875af19250505080156113e5575060408051601f3d908101601f191682019092526113e291810190611dc7565b60015b611413573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b6001600160e01b03191663bc197c8160e01b14905061135a565b60006001600160a01b0385163b156113565760405163e78b332560e01b81526001600160a01b0386169063e78b332590611473908a908a90899089908990600401611de4565b6020604051808303816000875af19250505080156114ae575060408051601f3d908101601f191682019092526114ab91810190611dc7565b60015b6114dc573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b6001600160e01b03191663e78b332560e01b14905061135a565b60006001600160a01b0385163b156113565760405163f23a6e6160e01b81526001600160a01b0386169063f23a6e619061153c908a908a90899089908990600401611de4565b6020604051808303816000875af1925050508015611577575060408051601f3d908101601f1916820190925261157491810190611dc7565b60015b6115a5573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b6001600160e01b03191663f23a6e6160e01b14905061135a565b80356001600160a01b03811681146115d657600080fd5b919050565b600080604083850312156115ee57600080fd5b6115f7836115bf565b946020939093013593505050565b6001600160e01b03198116811461079b57600080fd5b60006020828403121561162d57600080fd5b813561163881611605565b9392505050565b60006020828403121561165157600080fd5b5035919050565b60005b8381101561167357818101518382015260200161165b565b83811115611682576000848401525b50505050565b600081518084526116a0816020860160208601611658565b601f01601f19169290920160200192915050565b6020815260006116386020830184611688565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611706576117066116c7565b604052919050565b600067ffffffffffffffff821115611728576117286116c7565b5060051b60200190565b600082601f83011261174357600080fd5b813560206117586117538361170e565b6116dd565b82815260059290921b8401810191818101908684111561177757600080fd5b8286015b84811015611792578035835291830191830161177b565b509695505050505050565b600082601f8301126117ae57600080fd5b813567ffffffffffffffff8111156117c8576117c86116c7565b6117db601f8201601f19166020016116dd565b8181528460208386010111156117f057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561182557600080fd5b61182e866115bf565b945061183c602087016115bf565b9350604086013567ffffffffffffffff8082111561185957600080fd5b61186589838a01611732565b9450606088013591508082111561187b57600080fd5b61188789838a01611732565b9350608088013591508082111561189d57600080fd5b506118aa8882890161179d565b9150509295509295909350565b600080604083850312156118ca57600080fd5b823567ffffffffffffffff808211156118e257600080fd5b818501915085601f8301126118f657600080fd5b813560206119066117538361170e565b82815260059290921b8401810191818101908984111561192557600080fd5b948201945b8386101561194a5761193b866115bf565b8252948201949082019061192a565b9650508601359250508082111561196057600080fd5b5061196d85828601611732565b9150509250929050565b600081518084526020808501945080840160005b838110156119a75781518752958201959082019060010161198b565b509495945050505050565b6020815260006116386020830184611977565b600080604083850312156119d857600080fd5b50508035926020909101359150565b6000602082840312156119f957600080fd5b611638826115bf565b60008060408385031215611a1557600080fd5b611a1e836115bf565b915060208301358015158114611a3357600080fd5b809150509250929050565b60008060408385031215611a5157600080fd5b611a5a836115bf565b9150611a68602084016115bf565b90509250929050565b600080600080600060a08688031215611a8957600080fd5b611a92866115bf565b9450611aa0602087016115bf565b93506040860135925060608601359150608086013567ffffffffffffffff811115611aca57600080fd5b6118aa8882890161179d565b600181811c90821680611aea57607f821691505b602082108103611b0a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151611b22818560208601611658565b9290920192915050565b600080845481600182811c915080831680611b4857607f831692505b60208084108203611b6757634e487b7160e01b86526022600452602486fd5b818015611b7b5760018114611b8c57611bb9565b60ff19861689528489019650611bb9565b60008b81526020902060005b86811015611bb15781548b820152908501908301611b98565b505084890196505b505050505050611bc98185611b10565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c1057611c10611be8565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611c5f57611c5f611be8565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611c8957611c89611c64565b500490565b600082821015611ca057611ca0611be8565b500390565b600082611cb457611cb4611c64565b500690565b60208082526023908201527f4b495033373a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526028908201527f4b495033373a20696e73756666696369656e742062616c616e636520666f72206040820152673a3930b739b332b960c11b606082015260800190565b604081526000611d576040830185611977565b8281036020840152611bc98185611977565b6001600160a01b0386811682528516602082015260a060408201819052600090611d9590830186611977565b8281036060840152611da78186611977565b90508281036080840152611dbb8185611688565b98975050505050505050565b600060208284031215611dd957600080fd5b815161163881611605565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e1e90830184611688565b97965050505050505056fea26469706673582212200584439247c2d200cd21d349379e4302cb4e80a78df3c41563aa0db401228e7a64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IKIP37-balanceOf}. Requirements: - `owner` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IKIP37-balanceOfBatch}. Requirements: - `owners` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IKIP37-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IKIP37-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IKIP37-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IKIP37-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IKIP13-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1646,
        "contract": "src/Utils.sol:Utils",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1650,
        "contract": "src/Utils.sol:Utils",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1656,
        "contract": "src/Utils.sol:Utils",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1658,
        "contract": "src/Utils.sol:Utils",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3211,
        "contract": "src/Utils.sol:Utils",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6716,
        "contract": "src/Utils.sol:Utils",
        "label": "baseUri",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 6718,
        "contract": "src/Utils.sol:Utils",
        "label": "utilCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}